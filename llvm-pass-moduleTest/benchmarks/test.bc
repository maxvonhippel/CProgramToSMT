; ModuleID = 'benchmarks/DCmotor/dcMotor.c'
source_filename = "benchmarks/DCmotor/dcMotor.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.INPUT_VAL = type { double, double }
%struct.RETURN_VAL = type { double }

; Function Attrs: nounwind uwtable
define dso_local noalias i8* @controller(%struct.INPUT_VAL* nocapture %input, %struct.RETURN_VAL* nocapture %ret_val) local_unnamed_addr #0 !dbg !9 {
entry:
  call void @llvm.dbg.value(metadata %struct.INPUT_VAL* %input, metadata !26, metadata !DIExpression()), !dbg !36
  call void @llvm.dbg.value(metadata %struct.RETURN_VAL* %ret_val, metadata !27, metadata !DIExpression()), !dbg !37
  call void @llvm.dbg.value(metadata double 0.000000e+00, metadata !28, metadata !DIExpression()), !dbg !38
  call void @llvm.dbg.value(metadata double 4.000000e+01, metadata !29, metadata !DIExpression()), !dbg !39
  call void @llvm.dbg.value(metadata double 1.000000e+00, metadata !30, metadata !DIExpression()), !dbg !40
  %angVal = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 0, !dbg !41
  %0 = load double, double* %angVal, align 8, !dbg !41, !tbaa !42
  call void @llvm.dbg.value(metadata double %0, metadata !33, metadata !DIExpression()), !dbg !47
  %error_i_previous = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 1, !dbg !48
  %1 = load double, double* %error_i_previous, align 8, !dbg !48, !tbaa !49
  call void @llvm.dbg.value(metadata double %1, metadata !34, metadata !DIExpression()), !dbg !50
  call void @llvm.dbg.value(metadata double 1.000000e+00, metadata !35, metadata !DIExpression()), !dbg !51
  %add = fadd double %0, %0, !dbg !52
  %sub = fsub double 1.000000e+00, %add, !dbg !53
  call void @llvm.dbg.value(metadata double %sub, metadata !31, metadata !DIExpression()), !dbg !54
  %add2 = fadd double %1, %sub, !dbg !55
  call void @llvm.dbg.value(metadata double %add2, metadata !32, metadata !DIExpression()), !dbg !56
  call void @llvm.dbg.value(metadata double %add2, metadata !34, metadata !DIExpression()), !dbg !50
  %mul3 = fmul double %sub, 4.000000e+01, !dbg !57
  %add5 = fadd double %mul3, %add2, !dbg !58
  call void @llvm.dbg.value(metadata double %add5, metadata !28, metadata !DIExpression()), !dbg !38
  %cmp = fcmp ogt double %add5, 2.000000e+01, !dbg !59
  %cmp6 = fcmp olt double %add5, -2.000000e+01, !dbg !61
  %.add5 = select i1 %cmp6, double -2.000000e+01, double %add5, !dbg !63
  %pid_op.0 = select i1 %cmp, double 2.000000e+01, double %.add5, !dbg !64
  call void @llvm.dbg.value(metadata double %pid_op.0, metadata !28, metadata !DIExpression()), !dbg !38
  %voltage = getelementptr inbounds %struct.RETURN_VAL, %struct.RETURN_VAL* %ret_val, i64 0, i32 0, !dbg !65
  store double %pid_op.0, double* %voltage, align 8, !dbg !66, !tbaa !67
  store double %add2, double* %error_i_previous, align 8, !dbg !69, !tbaa !49
  ret i8* null, !dbg !70
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!5, !6, !7}
!llvm.ident = !{!8}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3)
!1 = !DIFile(filename: "benchmarks/DCmotor/dcMotor.c", directory: "/home/amit/MyData/1ProjectFMSafe/llvm-pass-moduleTest")
!2 = !{}
!3 = !{!4}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!5 = !{i32 2, !"Dwarf Version", i32 4}
!6 = !{i32 2, !"Debug Info Version", i32 3}
!7 = !{i32 1, !"wchar_size", i32 4}
!8 = !{!"clang version 7.0.0 "}
!9 = distinct !DISubprogram(name: "controller", scope: !1, file: !1, line: 9, type: !10, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !25)
!10 = !DISubroutineType(types: !11)
!11 = !{!4, !12, !20}
!12 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !13, size: 64)
!13 = !DIDerivedType(tag: DW_TAG_typedef, name: "INPUT_VAL", file: !14, line: 15, baseType: !15)
!14 = !DIFile(filename: "benchmarks/DCmotor/dcMotor.h", directory: "/home/amit/MyData/1ProjectFMSafe/llvm-pass-moduleTest")
!15 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !14, line: 12, size: 128, elements: !16)
!16 = !{!17, !19}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "angVal", scope: !15, file: !14, line: 13, baseType: !18, size: 64)
!18 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "error_i_previous", scope: !15, file: !14, line: 14, baseType: !18, size: 64, offset: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "RETURN_VAL", file: !14, line: 10, baseType: !22)
!22 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !14, line: 8, size: 64, elements: !23)
!23 = !{!24}
!24 = !DIDerivedType(tag: DW_TAG_member, name: "voltage", scope: !22, file: !14, line: 9, baseType: !18, size: 64)
!25 = !{!26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!26 = !DILocalVariable(name: "input", arg: 1, scope: !9, file: !1, line: 9, type: !12)
!27 = !DILocalVariable(name: "ret_val", arg: 2, scope: !9, file: !1, line: 9, type: !20)
!28 = !DILocalVariable(name: "pid_op", scope: !9, file: !1, line: 11, type: !18)
!29 = !DILocalVariable(name: "KP", scope: !9, file: !1, line: 12, type: !18)
!30 = !DILocalVariable(name: "KI", scope: !9, file: !1, line: 13, type: !18)
!31 = !DILocalVariable(name: "error", scope: !9, file: !1, line: 15, type: !18)
!32 = !DILocalVariable(name: "error_i", scope: !9, file: !1, line: 15, type: !18)
!33 = !DILocalVariable(name: "y", scope: !9, file: !1, line: 17, type: !18)
!34 = !DILocalVariable(name: "error_i_prev", scope: !9, file: !1, line: 19, type: !18)
!35 = !DILocalVariable(name: "ref", scope: !9, file: !1, line: 20, type: !18)
!36 = !DILocation(line: 9, column: 29, scope: !9)
!37 = !DILocation(line: 9, column: 48, scope: !9)
!38 = !DILocation(line: 11, column: 10, scope: !9)
!39 = !DILocation(line: 12, column: 10, scope: !9)
!40 = !DILocation(line: 13, column: 10, scope: !9)
!41 = !DILocation(line: 17, column: 21, scope: !9)
!42 = !{!43, !44, i64 0}
!43 = !{!"", !44, i64 0, !44, i64 8}
!44 = !{!"double", !45, i64 0}
!45 = !{!"omnipotent char", !46, i64 0}
!46 = !{!"Simple C/C++ TBAA"}
!47 = !DILocation(line: 17, column: 10, scope: !9)
!48 = !DILocation(line: 19, column: 32, scope: !9)
!49 = !{!43, !44, i64 8}
!50 = !DILocation(line: 19, column: 10, scope: !9)
!51 = !DILocation(line: 20, column: 10, scope: !9)
!52 = !DILocation(line: 23, column: 20, scope: !9)
!53 = !DILocation(line: 23, column: 15, scope: !9)
!54 = !DILocation(line: 15, column: 10, scope: !9)
!55 = !DILocation(line: 25, column: 24, scope: !9)
!56 = !DILocation(line: 15, column: 17, scope: !9)
!57 = !DILocation(line: 28, column: 18, scope: !9)
!58 = !DILocation(line: 28, column: 23, scope: !9)
!59 = !DILocation(line: 30, column: 13, scope: !60)
!60 = distinct !DILexicalBlock(scope: !9, file: !1, line: 30, column: 6)
!61 = !DILocation(line: 32, column: 18, scope: !62)
!62 = distinct !DILexicalBlock(scope: !60, file: !1, line: 32, column: 11)
!63 = !DILocation(line: 33, column: 5, scope: !62)
!64 = !DILocation(line: 30, column: 6, scope: !9)
!65 = !DILocation(line: 37, column: 12, scope: !9)
!66 = !DILocation(line: 37, column: 20, scope: !9)
!67 = !{!68, !44, i64 0}
!68 = !{!"", !44, i64 0}
!69 = !DILocation(line: 38, column: 27, scope: !9)
!70 = !DILocation(line: 40, column: 3, scope: !9)
