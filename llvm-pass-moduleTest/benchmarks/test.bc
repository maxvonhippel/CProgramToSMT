; ModuleID = 'benchmarks/mythermo1.c'
source_filename = "benchmarks/mythermo1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.INPUT_VAL = type { double, i32, i32, i32, i32, i32 }
%struct.RETURN_VAL = type { double }

; Function Attrs: nounwind uwtable
define dso_local void @controller(%struct.INPUT_VAL* nocapture %input, %struct.RETURN_VAL* nocapture %ret_val) local_unnamed_addr #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata %struct.INPUT_VAL* %input, metadata !29, metadata !DIExpression()), !dbg !41
  call void @llvm.dbg.value(metadata %struct.RETURN_VAL* %ret_val, metadata !30, metadata !DIExpression()), !dbg !42
  call void @llvm.dbg.value(metadata i32 2, metadata !36, metadata !DIExpression()), !dbg !43
  call void @llvm.dbg.value(metadata double 7.000000e+01, metadata !39, metadata !DIExpression()), !dbg !44
  call void @llvm.dbg.value(metadata double 6.600000e+01, metadata !40, metadata !DIExpression()), !dbg !45
  %temperature = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 0, !dbg !46
  %0 = load double, double* %temperature, align 8, !dbg !46, !tbaa !47
  call void @llvm.dbg.value(metadata double %0, metadata !38, metadata !DIExpression()), !dbg !53
  %chat_detect = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 1, !dbg !54
  %1 = load i32, i32* %chat_detect, align 8, !dbg !54, !tbaa !55
  call void @llvm.dbg.value(metadata i32 %1, metadata !31, metadata !DIExpression()), !dbg !56
  %previous_cmd_to_heater = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 2, !dbg !57
  %2 = load i32, i32* %previous_cmd_to_heater, align 4, !dbg !57, !tbaa !58
  call void @llvm.dbg.value(metadata i32 %2, metadata !32, metadata !DIExpression()), !dbg !59
  %on_count = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 3, !dbg !60
  %3 = load i32, i32* %on_count, align 8, !dbg !60, !tbaa !61
  call void @llvm.dbg.value(metadata i32 %3, metadata !33, metadata !DIExpression()), !dbg !62
  %off_count = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 4, !dbg !63
  %4 = load i32, i32* %off_count, align 4, !dbg !63, !tbaa !64
  call void @llvm.dbg.value(metadata i32 %4, metadata !34, metadata !DIExpression()), !dbg !65
  %cmd_to_heater = getelementptr inbounds %struct.INPUT_VAL, %struct.INPUT_VAL* %input, i64 0, i32 5, !dbg !66
  call void @llvm.dbg.value(metadata i32* %cmd_to_heater, metadata !35, metadata !DIExpression(DW_OP_deref)), !dbg !67
  %cmp = fcmp oge double %0, 6.600000e+01, !dbg !68
  %cmp1 = fcmp olt double %0, 7.000000e+01, !dbg !70
  %or.cond81 = and i1 %cmp, %cmp1, !dbg !71
  br i1 %or.cond81, label %if.end9, label %if.else, !dbg !71

if.else:                                          ; preds = %entry
  %cmp2 = fcmp ult double %0, 7.000000e+01, !dbg !72
  br i1 %cmp2, label %if.else4, label %if.end9, !dbg !74

if.else4:                                         ; preds = %if.else
  %cmp5 = fcmp olt double %0, 6.600000e+01, !dbg !75
  %. = select i1 %cmp5, i32 1, i32 %2, !dbg !77
  br label %if.end9, !dbg !77

if.end9:                                          ; preds = %if.else4, %if.else, %entry
  %command_to_heater.0 = phi i32 [ 2, %entry ], [ 0, %if.else ], [ %., %if.else4 ], !dbg !78
  call void @llvm.dbg.value(metadata i32 %command_to_heater.0, metadata !35, metadata !DIExpression()), !dbg !67
  %cmp10 = icmp sgt i32 %4, 4, !dbg !79
  %cmp11 = icmp sgt i32 %3, 4, !dbg !81
  %or.cond = or i1 %cmp11, %cmp10, !dbg !82
  %spec.select = select i1 %or.cond, i32 0, i32 %1, !dbg !82
  call void @llvm.dbg.value(metadata i32 %spec.select, metadata !31, metadata !DIExpression()), !dbg !56
  %cmp14 = icmp ne i32 %command_to_heater.0, %2, !dbg !83
  call void @llvm.dbg.value(metadata i32 %spec.select, metadata !31, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !56
  %inc = zext i1 %cmp14 to i32, !dbg !85
  %chatter_detect.1 = add nsw i32 %spec.select, %inc, !dbg !85
  call void @llvm.dbg.value(metadata i32 %chatter_detect.1, metadata !31, metadata !DIExpression()), !dbg !56
  %cmp17 = icmp sgt i32 %chatter_detect.1, 2, !dbg !86
  %spec.select82 = select i1 %cmp17, i32 %2, i32 %command_to_heater.0, !dbg !88
  call void @llvm.dbg.value(metadata i32 %spec.select82, metadata !35, metadata !DIExpression()), !dbg !67
  %cmp20 = icmp eq i32 %spec.select82, 0, !dbg !89
  call void @llvm.dbg.value(metadata i32 0, metadata !33, metadata !DIExpression()), !dbg !62
  %inc22 = add nsw i32 %4, 1, !dbg !91
  call void @llvm.dbg.value(metadata i32 %inc22, metadata !34, metadata !DIExpression()), !dbg !65
  %inc24 = add nsw i32 %3, 1, !dbg !93
  call void @llvm.dbg.value(metadata i32 %inc24, metadata !33, metadata !DIExpression()), !dbg !62
  call void @llvm.dbg.value(metadata i32 0, metadata !34, metadata !DIExpression()), !dbg !65
  %off_counter.0 = select i1 %cmp20, i32 %inc22, i32 0, !dbg !95
  %on_counter.0 = select i1 %cmp20, i32 0, i32 %inc24, !dbg !95
  call void @llvm.dbg.value(metadata i32 %on_counter.0, metadata !33, metadata !DIExpression()), !dbg !62
  call void @llvm.dbg.value(metadata i32 %off_counter.0, metadata !34, metadata !DIExpression()), !dbg !65
  %cond = icmp eq i32 %spec.select82, 2, !dbg !96
  %spec.select83 = select i1 %cond, double 7.000000e+01, double 1.000000e+02, !dbg !96
  %uVal.0 = select i1 %cmp20, double 2.000000e+01, double %spec.select83, !dbg !98
  call void @llvm.dbg.value(metadata double %uVal.0, metadata !37, metadata !DIExpression()), !dbg !99
  %u = getelementptr inbounds %struct.RETURN_VAL, %struct.RETURN_VAL* %ret_val, i64 0, i32 0, !dbg !100
  store double %uVal.0, double* %u, align 8, !dbg !101, !tbaa !102
  store i32 %spec.select82, i32* %cmd_to_heater, align 8, !dbg !104, !tbaa !105
  store i32 %chatter_detect.1, i32* %chat_detect, align 8, !dbg !106, !tbaa !55
  store i32 %spec.select82, i32* %previous_cmd_to_heater, align 4, !dbg !107, !tbaa !58
  store i32 %on_counter.0, i32* %on_count, align 8, !dbg !108, !tbaa !61
  store i32 %off_counter.0, i32* %off_count, align 4, !dbg !109, !tbaa !64
  ret void, !dbg !110
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 7.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "benchmarks/mythermo1.c", directory: "/home/amit/MyData/1ProjectFMSafe/llvm-pass-moduleTest")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 7.0.0 "}
!7 = distinct !DISubprogram(name: "controller", scope: !1, file: !1, line: 4, type: !8, isLocal: false, isDefinition: true, scopeLine: 4, flags: DIFlagPrototyped, isOptimized: true, unit: !0, retainedNodes: !28)
!8 = !DISubroutineType(types: !9)
!9 = !{null, !10, !23}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "INPUT_VAL", file: !12, line: 16, baseType: !13)
!12 = !DIFile(filename: "benchmarks/thermo1.h", directory: "/home/amit/MyData/1ProjectFMSafe/llvm-pass-moduleTest")
!13 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !12, line: 7, size: 256, elements: !14)
!14 = !{!15, !17, !19, !20, !21, !22}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "temperature", scope: !13, file: !12, line: 8, baseType: !16, size: 64)
!16 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "chat_detect", scope: !13, file: !12, line: 10, baseType: !18, size: 32, offset: 64)
!18 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "previous_cmd_to_heater", scope: !13, file: !12, line: 11, baseType: !18, size: 32, offset: 96)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "on_count", scope: !13, file: !12, line: 12, baseType: !18, size: 32, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "off_count", scope: !13, file: !12, line: 13, baseType: !18, size: 32, offset: 160)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "cmd_to_heater", scope: !13, file: !12, line: 14, baseType: !18, size: 32, offset: 192)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_typedef, name: "RETURN_VAL", file: !12, line: 5, baseType: !25)
!25 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !12, line: 2, size: 64, elements: !26)
!26 = !{!27}
!27 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !25, file: !12, line: 3, baseType: !16, size: 64)
!28 = !{!29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40}
!29 = !DILocalVariable(name: "input", arg: 1, scope: !7, file: !1, line: 4, type: !10)
!30 = !DILocalVariable(name: "ret_val", arg: 2, scope: !7, file: !1, line: 4, type: !23)
!31 = !DILocalVariable(name: "chatter_detect", scope: !7, file: !1, line: 5, type: !18)
!32 = !DILocalVariable(name: "previous_command_to_heater", scope: !7, file: !1, line: 6, type: !18)
!33 = !DILocalVariable(name: "on_counter", scope: !7, file: !1, line: 7, type: !18)
!34 = !DILocalVariable(name: "off_counter", scope: !7, file: !1, line: 7, type: !18)
!35 = !DILocalVariable(name: "command_to_heater", scope: !7, file: !1, line: 8, type: !18)
!36 = !DILocalVariable(name: "chatter_limit", scope: !7, file: !1, line: 10, type: !18)
!37 = !DILocalVariable(name: "uVal", scope: !7, file: !1, line: 11, type: !16)
!38 = !DILocalVariable(name: "room_temp", scope: !7, file: !1, line: 11, type: !16)
!39 = !DILocalVariable(name: "MAX_TEMP", scope: !7, file: !1, line: 12, type: !16)
!40 = !DILocalVariable(name: "MED_TEMP", scope: !7, file: !1, line: 12, type: !16)
!41 = !DILocation(line: 4, column: 28, scope: !7)
!42 = !DILocation(line: 4, column: 47, scope: !7)
!43 = !DILocation(line: 10, column: 6, scope: !7)
!44 = !DILocation(line: 12, column: 9, scope: !7)
!45 = !DILocation(line: 12, column: 24, scope: !7)
!46 = !DILocation(line: 16, column: 21, scope: !7)
!47 = !{!48, !49, i64 0}
!48 = !{!"", !49, i64 0, !52, i64 8, !52, i64 12, !52, i64 16, !52, i64 20, !52, i64 24}
!49 = !{!"double", !50, i64 0}
!50 = !{!"omnipotent char", !51, i64 0}
!51 = !{!"Simple C/C++ TBAA"}
!52 = !{!"int", !50, i64 0}
!53 = !DILocation(line: 11, column: 15, scope: !7)
!54 = !DILocation(line: 18, column: 26, scope: !7)
!55 = !{!48, !52, i64 8}
!56 = !DILocation(line: 5, column: 6, scope: !7)
!57 = !DILocation(line: 19, column: 38, scope: !7)
!58 = !{!48, !52, i64 12}
!59 = !DILocation(line: 6, column: 6, scope: !7)
!60 = !DILocation(line: 20, column: 22, scope: !7)
!61 = !{!48, !52, i64 16}
!62 = !DILocation(line: 7, column: 6, scope: !7)
!63 = !DILocation(line: 21, column: 23, scope: !7)
!64 = !{!48, !52, i64 20}
!65 = !DILocation(line: 7, column: 18, scope: !7)
!66 = !DILocation(line: 22, column: 29, scope: !7)
!67 = !DILocation(line: 8, column: 6, scope: !7)
!68 = !DILocation(line: 25, column: 15, scope: !69)
!69 = distinct !DILexicalBlock(scope: !7, file: !1, line: 25, column: 5)
!70 = !DILocation(line: 25, column: 40, scope: !69)
!71 = !DILocation(line: 25, column: 27, scope: !69)
!72 = !DILocation(line: 27, column: 20, scope: !73)
!73 = distinct !DILexicalBlock(scope: !69, file: !1, line: 27, column: 10)
!74 = !DILocation(line: 27, column: 10, scope: !69)
!75 = !DILocation(line: 29, column: 20, scope: !76)
!76 = distinct !DILexicalBlock(scope: !73, file: !1, line: 29, column: 10)
!77 = !DILocation(line: 30, column: 3, scope: !76)
!78 = !DILocation(line: 0, scope: !76)
!79 = !DILocation(line: 34, column: 17, scope: !80)
!80 = distinct !DILexicalBlock(scope: !7, file: !1, line: 34, column: 5)
!81 = !DILocation(line: 34, column: 36, scope: !80)
!82 = !DILocation(line: 34, column: 22, scope: !80)
!83 = !DILocation(line: 37, column: 23, scope: !84)
!84 = distinct !DILexicalBlock(scope: !7, file: !1, line: 37, column: 5)
!85 = !DILocation(line: 37, column: 5, scope: !7)
!86 = !DILocation(line: 40, column: 20, scope: !87)
!87 = distinct !DILexicalBlock(scope: !7, file: !1, line: 40, column: 5)
!88 = !DILocation(line: 40, column: 5, scope: !7)
!89 = !DILocation(line: 43, column: 23, scope: !90)
!90 = distinct !DILexicalBlock(scope: !7, file: !1, line: 43, column: 5)
!91 = !DILocation(line: 45, column: 14, scope: !92)
!92 = distinct !DILexicalBlock(scope: !90, file: !1, line: 43, column: 29)
!93 = !DILocation(line: 47, column: 13, scope: !94)
!94 = distinct !DILexicalBlock(scope: !90, file: !1, line: 46, column: 9)
!95 = !DILocation(line: 43, column: 5, scope: !7)
!96 = !DILocation(line: 53, column: 11, scope: !97)
!97 = distinct !DILexicalBlock(scope: !7, file: !1, line: 51, column: 6)
!98 = !DILocation(line: 51, column: 6, scope: !7)
!99 = !DILocation(line: 11, column: 9, scope: !7)
!100 = !DILocation(line: 58, column: 11, scope: !7)
!101 = !DILocation(line: 58, column: 13, scope: !7)
!102 = !{!103, !49, i64 0}
!103 = !{!"", !49, i64 0}
!104 = !DILocation(line: 60, column: 24, scope: !7)
!105 = !{!48, !52, i64 24}
!106 = !DILocation(line: 61, column: 22, scope: !7)
!107 = !DILocation(line: 62, column: 33, scope: !7)
!108 = !DILocation(line: 63, column: 19, scope: !7)
!109 = !DILocation(line: 64, column: 20, scope: !7)
!110 = !DILocation(line: 67, column: 1, scope: !7)
